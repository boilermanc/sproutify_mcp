// utils/htmlGenerator.js

/**
 * Generates an HTML page to display when no data is found for a query.
 * It provides helpful suggestions based on the type of data requested.
 * @param {string} dataType - A user-friendly name for the data type (e.g., 'pest applications').
 * @param {object} query - The parsed query object, used to display search terms.
 * @returns {string} - The full HTML for the "no data" page.
 */
function generateNoDataHTML(dataType = 'data', query = {}) {
    const suggestions = getSuggestionsForDataType(dataType, query);

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>No Data Found - Sproutify AI</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 40px 20px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333;
        }
        
        .container {
            background: white;
            border-radius: 16px;
            padding: 40px;
            max-width: 500px;
            width: 100%;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            border-top: 5px solid #6a7ee7;
        }
        
        .icon {
            width: 80px;
            height: 80px;
            margin: 0 auto 24px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 36px;
            color: white;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        h1 {
            color: #2d3748;
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 16px;
            line-height: 1.3;
        }
        
        .message {
            color: #4a5568;
            font-size: 16px;
            line-height: 1.6;
            margin-bottom: 32px;
        }
        
        .suggestions {
            background: #f7fafc;
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 32px;
            text-align: left;
            border: 1px solid #e2e8f0;
        }
        
        .suggestions h3 {
            color: #2d3748;
            font-size: 18px;
            margin-bottom: 16px;
            font-weight: 600;
        }
        
        .suggestions ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .suggestions li {
            padding: 8px 0;
            color: #4a5568;
            position: relative;
            padding-left: 28px;
        }
        
        .suggestions li:before {
            content: "üí°";
            position: absolute;
            left: 0;
            font-size: 16px;
        }
        
        .footer {
            color: #718096;
            font-size: 14px;
            border-top: 1px solid #e2e8f0;
            padding-top: 20px;
            margin-top: 20px;
        }
        
        .brand {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 600;
        }
        
        @media (max-width: 480px) {
            .container {
                padding: 24px;
                margin: 20px;
            }
            
            h1 {
                font-size: 20px;
            }
            
            .message {
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">üîç</div>
        
        <h1>No matching data found</h1>
        
        <div class="message">
            I searched for <strong>${dataType}</strong>${query.searchTerms && query.searchTerms.length > 0 ? ` matching "<em>${query.searchTerms.join(', ')}</em>"` : ' based on your request'}, but couldn't find any records.
        </div>
        
        <div class="suggestions">
            <h3>Here are some things you can try asking:</h3>
            <ul>
                ${suggestions.map(suggestion => `<li>${suggestion}</li>`).join('')}
            </ul>
        </div>
        
        <div class="footer">
            <div>Generated by <span class="brand">Sproutify AI</span></div>
            <div style="margin-top: 8px; font-size: 13px;">
                Your intelligent farm management assistant
            </div>
        </div>
    </div>
</body>
</html>`;
}

/**
 * Enhanced suggestions function with harvest/allocation support
 * Provides a list of helpful query suggestions based on the data type that was not found.
 * @param {string} dataType - A user-friendly name for the data type.
 * @param {object} query - The original parsed query object.
 * @returns {string[]} - An array of suggestion strings.
 */
function getSuggestionsForDataType(dataType, query = {}) {
    // EXISTING DATA TYPES (your original code)
    if (dataType.includes('pest')) {
        return [
            'Try asking for a different time period, like "last 3 months" or "this year".',
            'Ask about specific products like "Pyganic" or "Pageant".',
            'Try broader terms like "all pest applications" or "insecticide applications".',
            'Ask about other data types like "tower status" or "monitoring data".'
        ];
    } else if (dataType.includes('tower')) {
        return [
            'Try different plant names like "lettuce", "oak", or "butter rex".',
            'Ask about tower status like "available towers" or "maintenance towers".',
            'Try broader searches like "all towers" or "growing towers".',
            'Ask about other data types like "pest applications" or "monitoring data".'
        ];
    } else if (dataType.includes('monitoring')) {
        return [
            'Try asking about "towers needing attention" or "pH issues".',
            'Ask about specific parameters like "pH readings" or "EC levels".',
            'Try broader terms like "all monitoring data" or "recent readings".',
            'Ask about other data types like "towers" or "lighting usage".'
        ];
    } else if (dataType.includes('lighting')) {
        return [
            'Try asking for different time periods like "daily lighting" or "monthly usage".',
            'Ask about specific metrics like "energy usage" or "lighting costs".',
            'Try broader terms like "all lighting data" or "zone usage".',
            'Ask about other data types like "towers" or "sensor readings".'
        ];
    } else if (dataType.includes('sensor')) {
        return [
            'Try asking for specific reading types like "temperature" or "humidity".',
            'Ask for different time periods like "recent readings" or "last hour".',
            'Try broader terms like "all sensor data" or "environmental readings".',
            'Ask about other data types like "towers" or "monitoring data".'
        ];
    }
    // NEW HARVEST/ALLOCATION DATA TYPES
    else if (dataType.includes('harvest') || dataType.includes('available')) {
        return [
            'Try asking about specific plants like "lettuce harvest" or "tomato inventory".',
            'Ask about freshness levels like "fresh harvest" or "aging inventory".',
            'Try time-based queries like "today\'s harvest" or "this week\'s harvest".',
            'Ask about quantities like "available for allocation" or "harvest ready for delivery".',
            'Try asking about "harvest performance" or "waste analysis".'
        ];
    } else if (dataType.includes('allocation') || dataType.includes('delivery')) {
        return [
            'Try asking about "pending deliveries" or "overdue allocations".',
            'Ask about specific customers like "restaurant deliveries" or "wholesale allocations".',
            'Try urgency levels like "urgent deliveries" or "deliveries needed today".',
            'Ask about delivery methods like "farm deliveries" or "customer pickups".',
            'Try asking about "delivery performance" or "allocation efficiency".'
        ];
    } else if (dataType.includes('customer')) {
        return [
            'Try asking about specific customer types like "restaurants" or "retail customers".',
            'Ask about customer performance like "reliable customers" or "completion rates".',
            'Try time-based queries like "recent customers" or "top customers this month".',
            'Ask about delivery patterns like "pickup customers" or "delivery customers".'
        ];
    } else if (dataType.includes('inventory') || dataType.includes('aging')) {
        return [
            'Try asking about "old inventory" or "fresh inventory".',
            'Ask about waste risk like "inventory at risk" or "items expiring soon".',
            'Try specific age ranges like "inventory older than 5 days".',
            'Ask about inventory status like "available inventory" or "allocated inventory".'
        ];
    } else if (dataType.includes('performance') || dataType.includes('summary')) {
        return [
            'Try asking about "weekly performance" or "monthly summary".',
            'Ask about specific metrics like "delivery rates" or "waste percentages".',
            'Try comparative queries like "this week vs last week".',
            'Ask about daily operations like "today\'s numbers" or "current status".'
        ];
    } else { // Updated generic fallback
        return [
            'Try asking for a different time period or broader criteria.',
            'Ask about other data types like "harvest", "allocations", "deliveries", "inventory", "customers", "towers", "pest", "monitoring", "lighting", or "sensors".',
            'Try combining criteria, like "urgent deliveries for restaurants" or "fresh lettuce available".',
            'Check if the data has been entered into the system recently.',
            'Try rephrasing your question.'
        ];
    }
}

/**
 * Generates an HTML page to display in case of a server-side error.
 * @param {string} errorMessage - The error message to display to the user.
 * @returns {string} - The full HTML for the error page.
 */
function generateErrorHTML(errorMessage) {
    // Sanitize the error message slightly for display
    const safeMessage = errorMessage ? String(errorMessage).replace(/</g, "&lt;").replace(/>/g, "&gt;") : 'An unknown error occurred.';

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error - Sproutify AI</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 40px 20px;
            background-color: #f8f9fa;
        }
        .container {
            background: white;
            border-radius: 12px;
            padding: 40px;
            max-width: 500px;
            margin: 0 auto;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            text-align: center;
            border-top: 5px solid #dc3545;
        }
        .icon {
            font-size: 40px;
            color: #dc3545;
            margin-bottom: 20px;
        }
        h1 {
            color: #dc3545;
            margin-bottom: 20px;
            font-size: 24px;
            font-weight: 600;
        }
        .message {
            background: #f8d7da;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #dc3545;
            color: #721c24;
            margin-bottom: 20px;
            text-align: left;
        }
        .footer {
            color: #718096;
            font-size: 14px;
            border-top: 1px solid #e2e8f0;
            padding-top: 20px;
            margin-top: 20px;
        }
        .brand {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">‚ö†Ô∏è</div>
        <h1>Oops! Something went wrong</h1>
        <div class="message">
            <p><strong>Error:</strong> ${safeMessage}</p>
            <p>I encountered an issue while processing your request. Please try again in a moment, or try asking in a different way.</p>
        </div>
        <div class="footer">
            <div>Generated by <span class="brand">Sproutify AI</span></div>
            <div style="margin-top: 8px; font-size: 13px;">Your intelligent farm management assistant</div>
        </div>
    </div>
</body>
</html>`;
}

/**
 * Generates a simple HTML table with mock data. Used as a fallback when real data
 * cannot be fetched (e.g., missing farm ID).
 * @returns {string} - The full HTML for the mock data table.
 */
function generateMockTableHTML() {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mock Data Table</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            color: #333;
        }
        .container {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            background: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        h1 {
            font-size: 18px;
            color: #2E8B57;
            border-bottom: 2px solid #2E8B57;
            padding-bottom: 5px;
            margin-top: 0;
        }
        .info {
            background: #fff3cd;
            color: #856404;
            padding: 10px 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            border-left: 4px solid #ffc107;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #495057;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .footer {
            margin-top: 20px; 
            font-size: 12px; 
            color: #666; 
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Sample Data Table</h1>
        <div class="info">
            <em>This is mock data. Please provide a farm ID and a proper message to get real data.</em>
        </div>
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>John Doe</td>
                    <td>john@example.com</td>
                    <td>Active</td>
                </tr>
                <tr>
                    <td>Jane Smith</td>
                    <td>jane@example.com</td>
                    <td>Pending</td>
                </tr>
                <tr>
                    <td>Bob Johnson</td>
                    <td>bob@example.com</td>
                    <td>Inactive</td>
                </tr>
            </tbody>
        </table>
        <div class="footer">
            Generated by <strong>Sproutify AI</strong> - Your intelligent farm management assistant
        </div>
    </div>
</body>
</html>`;
}

/**
 * NEW: Generates HTML table for harvest-related data with color coding
 * @param {Array} data - Array of data objects from reporting views
 * @param {string} title - Title for the table
 * @param {string} dataType - Type of data for appropriate styling
 * @returns {string} - HTML table with Sproutify AI styling
 */
function generateHarvestDataTable(data, title, dataType = 'harvest') {
    if (!data || data.length === 0) {
        return generateNoDataHTML(dataType);
    }

    // Get columns from first row
    const columns = Object.keys(data[0]);
    const colorColumns = columns.filter(col => col.includes('_color'));
    const textColumns = columns.filter(col => !col.includes('_color'));

    const tableRows = data.map(row => {
        const cells = textColumns.map(col => {
            const value = row[col];
            const colorField = col + '_color';
            const hasColor = colorColumns.includes(colorField);
            
            // Format specific field types
            let displayValue = value;
            if (col.includes('_percent')) {
                displayValue = `${value}%`;
            } else if (col.includes('date') && value) {
                displayValue = new Date(value).toLocaleDateString();
            } else if (col.includes('quantity') || col.includes('days_')) {
                displayValue = value || '0';
            }

            // Apply color if available
            const style = hasColor ? `style="color: ${row[colorField]}; font-weight: 600;"` : '';
            
            return `<td ${style}>${displayValue}</td>`;
        }).join('');
        
        return `<tr>${cells}</tr>`;
    }).join('');

    const headerCells = textColumns.map(col => {
        // Convert snake_case to Title Case
        const title = col.replace(/_/g, ' ')
                        .replace(/\b\w/g, l => l.toUpperCase())
                        .replace(/Id\b/g, 'ID')
                        .replace(/Qty/g, 'Quantity');
        return `<th>${title}</th>`;
    }).join('');

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title} - Sproutify AI</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 40px 20px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            background: white;
            border-radius: 16px;
            padding: 40px;
            max-width: 1200px;
            margin: 0 auto;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            border-top: 5px solid #6a7ee7;
        }
        
        .header {
            text-align: center;
            margin-bottom: 32px;
        }
        
        .header h1 {
            color: #2d3748;
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 8px;
            line-height: 1.3;
        }
        
        .subtitle {
            color: #4a5568;
            font-size: 16px;
            margin-bottom: 24px;
        }
        
        .table-container {
            overflow-x: auto;
            border-radius: 12px;
            border: 1px solid #e2e8f0;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }
        
        th {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 16px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            border: none;
        }
        
        td {
            padding: 12px;
            border-bottom: 1px solid #e2e8f0;
            font-size: 14px;
        }
        
        tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        
        tr:hover {
            background-color: #e3f2fd;
        }
        
        .footer {
            text-align: center;
            color: #718096;
            font-size: 14px;
            border-top: 1px solid #e2e8f0;
            padding-top: 20px;
            margin-top: 32px;
        }
        
        .brand {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 600;
        }
        
        .stats {
            display: flex;
            justify-content: center;
            gap: 40px;
            margin-bottom: 24px;
            flex-wrap: wrap;
        }
        
        .stat {
            text-align: center;
        }
        
        .stat-number {
            font-size: 24px;
            font-weight: 600;
            color: #6a7ee7;
        }
        
        .stat-label {
            font-size: 12px;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .print-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }
        
        .print-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        /* Print styles */
        @media print {
            body {
                background: white !important;
                padding: 0 !important;
            }
            
            .container {
                box-shadow: none !important;
                border: none !important;
                border-radius: 0 !important;
                padding: 20px !important;
                margin: 0 !important;
                max-width: none !important;
            }
            
            .print-btn {
                display: none !important;
            }
            
            .header h1 {
                color: #000 !important;
                font-size: 24px !important;
            }
            
            .subtitle {
                color: #666 !important;
            }
            
            th {
                background: #f0f0f0 !important;
                color: #000 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            tr:nth-child(even) {
                background-color: #f9f9f9 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .footer {
                border-top: 1px solid #ccc !important;
                color: #666 !important;
            }
            
            .brand {
                color: #000 !important;
                background: none !important;
                -webkit-text-fill-color: #000 !important;
            }
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
            }
            
            .header h1 {
                font-size: 22px;
            }
            
            .stats {
                gap: 20px;
            }
            
            th, td {
                padding: 8px 6px;
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 20px;">
                <div style="flex: 1;">
                    <h1>${title}</h1>
                    <div class="subtitle">Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</div>
                </div>
                <button class="print-btn" onclick="printReport()">üñ®Ô∏è Print</button>
            </div>
            
            <div class="stats">
                <div class="stat">
                    <div class="stat-number">${data.length}</div>
                    <div class="stat-label">Records Found</div>
                </div>
            </div>
        </div>
        
        <div class="table-container">
            <table>
                <thead>
                    <tr>${headerCells}</tr>
                </thead>
                <tbody>
                    ${tableRows}
                </tbody>
            </table>
        </div>
        
        <div class="footer">
            <div>Generated by <span class="brand">Sproutify AI</span></div>
            <div style="margin-top: 8px; font-size: 13px;">
                Your intelligent farm management assistant
            </div>
        </div>
    </div>
    
    <script>
        function printReport() {
            window.print();
        }
        
        // Print with Ctrl+P keyboard shortcut
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
                e.preventDefault();
                printReport();
            }
        });
    </script>
</body>
</html>`;
}

/**
 * NEW: Generates a summary dashboard for harvest operations
 * @param {Object} summaryData - Data from rpt_summary_stats view
 * @param {Array} urgentDeliveries - Data from rpt_pending_deliveries where urgency = 'urgent'
 * @param {Array} agingInventory - Data from rpt_inventory_aging where waste_risk_level = 'high_waste_risk'
 * @returns {string} - HTML dashboard
 */
function generateHarvestDashboard(summaryData, urgentDeliveries = [], agingInventory = []) {
    const stats = summaryData || {};
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Farm Operations Dashboard - Sproutify AI</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 40px 20px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            background: white;
            border-radius: 16px;
            padding: 40px;
            max-width: 1000px;
            margin: 0 auto;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            border-top: 5px solid #6a7ee7;
        }
        
        .dashboard-header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .dashboard-header h1 {
            color: #2d3748;
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .subtitle {
            color: #4a5568;
            font-size: 16px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .metric-card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 24px;
            text-align: center;
            border: 1px solid #e2e8f0;
            transition: transform 0.2s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .metric-number {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .metric-label {
            font-size: 14px;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .alerts-section {
            margin-bottom: 40px;
        }
        
        .section-title {
            font-size: 20px;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .alert-item {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 12px 16px;
            margin-bottom: 8px;
            border-radius: 0 8px 8px 0;
        }
        
        .urgent-item {
            background: #f8d7da;
            border-left-color: #dc3545;
        }
        
        .footer {
            text-align: center;
            color: #718096;
            font-size: 14px;
            border-top: 1px solid #e2e8f0;
            padding-top: 20px;
            margin-top: 32px;
        }
        
        .brand {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 600;
        }
        
        .print-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }
        
        .print-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        /* Print styles */
        @media print {
            body {
                background: white !important;
                padding: 0 !important;
            }
            
            .container {
                box-shadow: none !important;
                border: none !important;
                border-radius: 0 !important;
                padding: 20px !important;
                margin: 0 !important;
                max-width: none !important;
            }
            
            .print-btn {
                display: none !important;
            }
            
            .dashboard-header h1 {
                color: #000 !important;
                font-size: 24px !important;
            }
            
            .subtitle {
                color: #666 !important;
            }
            
            .metric-card {
                border: 1px solid #ccc !important;
                box-shadow: none !important;
                background: #f9f9f9 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .alert-item {
                border: 1px solid #ccc !important;
                background: #f0f0f0 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .urgent-item {
                background: #ffe6e6 !important;
                border-left-color: #dc3545 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .footer {
                border-top: 1px solid #ccc !important;
                color: #666 !important;
            }
            
            .brand {
                color: #000 !important;
                background: none !important;
                -webkit-text-fill-color: #000 !important;
            }
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
            }
            
            .metrics-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 15px;
            }
            
            .metric-card {
                padding: 16px;
            }
            
            .metric-number {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="dashboard-header">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 20px;">
                <div style="flex: 1;">
                    <h1>üå± Farm Operations Dashboard</h1>
                    <div class="subtitle">Today's Overview ‚Ä¢ ${new Date().toLocaleDateString()}</div>
                </div>
                <button class="print-btn" onclick="printReport()">üñ®Ô∏è Print</button>
            </div>
        </div>
        
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-number" style="color: ${stats.activity_level_color || '#6a7ee7'}">${stats.todays_deliveries || 0}</div>
                <div class="metric-label">Today's Deliveries</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-number" style="color: ${stats.overdue_status_color || '#6a7ee7'}">${stats.pending_deliveries || 0}</div>
                <div class="metric-label">Pending Deliveries</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-number" style="color: ${stats.overdue_status_color || '#ff3b30'}">${stats.overdue_deliveries || 0}</div>
                <div class="metric-label">Overdue Deliveries</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-number" style="color: ${stats.old_inventory_color || '#6a7ee7'}">${stats.total_available_inventory || 0}</div>
                <div class="metric-label">Available Inventory</div>
            </div>
        </div>
        
        ${urgentDeliveries.length > 0 ? `
        <div class="alerts-section">
            <div class="section-title">
                üö® Urgent Deliveries
            </div>
            ${urgentDeliveries.map(item => `
                <div class="alert-item urgent-item">
                    <strong>${item.plant_name}</strong> for ${item.customer_name} ‚Ä¢ ${item.quantity} units ‚Ä¢ ${item.days_pending_text}
                </div>
            `).join('')}
        </div>
        ` : ''}
        
        ${agingInventory.length > 0 ? `
        <div class="alerts-section">
            <div class="section-title">
                ‚ö†Ô∏è Aging Inventory
            </div>
            ${agingInventory.map(item => `
                <div class="alert-item">
                    <strong>${item.plant_name}</strong> ‚Ä¢ ${item.available_quantity} units ‚Ä¢ ${item.age_text}
                </div>
            `).join('')}
        </div>
        ` : ''}
        
        <div class="footer">
            <div>Generated by <span class="brand">Sproutify AI</span></div>
            <div style="margin-top: 8px; font-size: 13px;">
                Your intelligent farm management assistant
            </div>
        </div>
    </div>
    
    <script>
        function printReport() {
            window.print();
        }
        
        // Print with Ctrl+P keyboard shortcut
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
                e.preventDefault();
                printReport();
            }
        });
    </script>
</body>
</html>`;
}

// Export all the functions (existing + new ones)
module.exports = {
    generateNoDataHTML,
    getSuggestionsForDataType,
    generateErrorHTML,
    generateMockTableHTML,
    generateHarvestDataTable,  // NEW
    generateHarvestDashboard,  // NEW
};